name: Integration Tests

on:
  push:
    branches:
    - main
    - master
    - develop
    - backoff
  pull_request:
    branches:
    - main
    - master
    - develop
    - backoff

permissions:
  contents: read

jobs:
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install PowerShell and Pester
      run: |
        # Set non-interactive mode to avoid prompts
        export DEBIAN_FRONTEND=noninteractive
        
        # Update package lists
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https software-properties-common
        
        # Download and install Microsoft signing key and repository
        wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
        
        # Use dpkg with force-confdef and force-confold to handle config conflicts automatically
        sudo dpkg --force-confdef --force-confold -i packages-microsoft-prod.deb
        
        # Install PowerShell
        sudo apt-get update
        sudo apt-get install -y powershell
        
        # Install Pester testing framework
        pwsh -c "Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck -AllowClobber"

    - name: Verify Docker Compose file
      run: |
        if [ ! -f "docker-compose.test.yml" ]; then
          echo "‚ùå docker-compose.test.yml not found"
          exit 1
        fi
        echo "‚úÖ Docker Compose test file found"
        
        # Validate Docker Compose file
        docker compose -f docker-compose.test.yml config

    - name: Pull Docker Images
      run: |
        echo "üîÑ Pulling required Docker images..."
        docker compose -f docker-compose.test.yml pull
        echo "‚úÖ Docker images pulled successfully"

    - name: Start Test Services
      run: |
        echo "üîÑ Starting test services..."
        docker compose -f docker-compose.test.yml up -d
        echo "‚úÖ Test services started"
        
        echo "üìã Running containers:"
        docker compose -f docker-compose.test.yml ps

    - name: Wait for Services to be Ready
      shell: pwsh
      run: |
        Write-Host "üîÑ Waiting for services to be ready..." -ForegroundColor Cyan
        
        function Test-ServiceHealth {
            param([string]$Url, [string]$ServiceName, [int]$TimeoutSeconds = 30)
            
            Write-Host "Checking $ServiceName..." -ForegroundColor Yellow
            $elapsed = 0
            $interval = 3
            
            do {
                try {
                    $response = Invoke-WebRequest -Uri $Url -Method Get -TimeoutSec 5 -UseBasicParsing
                    if ($response.StatusCode -eq 200) {
                        Write-Host "‚úÖ $ServiceName is ready!" -ForegroundColor Green
                        return $true
                    }
                } catch {
                    # Service not ready, continue waiting
                }
                
                Start-Sleep $interval
                $elapsed += $interval
                
                if ($elapsed % 15 -eq 0) {
                    Write-Host "  Still waiting for $ServiceName... ($elapsed/$TimeoutSeconds seconds)" -ForegroundColor Gray
                }
                
            } while ($elapsed -lt $TimeoutSeconds)
            
            Write-Host "‚ùå $ServiceName failed to become ready within $TimeoutSeconds seconds" -ForegroundColor Red
            return $false
        }
        
        # Test each service
        $services = @(
            @{ Url = "http://localhost:8080/api/rawdata"; Name = "Traefik API" },
            @{ Url = "http://localhost:8000/bypass"; Name = "Bypass Service" },
            @{ Url = "http://localhost:8000/protected"; Name = "Protected Service" }
        )
        
        $allReady = $true
        foreach ($service in $services) {
            if (-not (Test-ServiceHealth -Url $service.Url -ServiceName $service.Name)) {
                $allReady = $false
                break
            }
        }
        
        if (-not $allReady) {
            Write-Host "‚ùå Not all services became ready" -ForegroundColor Red
            exit 1
        }
        
        Write-Host "‚úÖ All services are ready for testing!" -ForegroundColor Green

    - name: Run Integration Tests
      shell: pwsh
      run: |
        Write-Host "üß™ Running Pester integration tests..." -ForegroundColor Cyan
        
        # Import Pester module
        Import-Module Pester -Force
        
        # Configure Pester
        $pesterConfig = New-PesterConfiguration
        $pesterConfig.Run.Path = "./scripts/integration-tests.Tests.ps1"
        $pesterConfig.Output.Verbosity = 'Detailed'
        $pesterConfig.Run.Exit = $false
        $pesterConfig.Run.PassThru = $true
        
        # Run tests
        $result = Invoke-Pester -Configuration $pesterConfig
        
        # Report results
        Write-Host ""
        Write-Host "üìä Test Results Summary:" -ForegroundColor Cyan
        Write-Host "  Total: $($result.TotalCount)" -ForegroundColor White
        Write-Host "  Passed: $($result.PassedCount)" -ForegroundColor Green
        Write-Host "  Failed: $($result.FailedCount)" -ForegroundColor Red
        Write-Host "  Skipped: $($result.SkippedCount)" -ForegroundColor Yellow
        
        if ($result.FailedCount -gt 0) {
            Write-Host "‚ùå $($result.FailedCount) test(s) failed" -ForegroundColor Red
            exit 1
        } else {
            Write-Host "‚úÖ All tests passed! üéâ" -ForegroundColor Green
        }

    - name: Show Container Logs on Failure
      if: failure()
      run: |
        echo "üìã Container Status:"
        docker compose -f docker-compose.test.yml ps
        
        echo ""
        echo "üìù Service Logs:"
        echo "==================== Traefik Logs ===================="
        docker compose -f docker-compose.test.yml logs traefik --tail=50
        
        echo ""
        echo "==================== WAF Logs ===================="
        docker compose -f docker-compose.test.yml logs waf --tail=50
        
        echo ""
        echo "==================== Protected Service Logs ===================="
        docker compose -f docker-compose.test.yml logs whoami-protected --tail=50
        
        echo ""
        echo "==================== Bypass Service Logs ===================="
        docker compose -f docker-compose.test.yml logs whoami-bypass --tail=50

    - name: Cleanup Test Environment
      if: always()
      run: |
        echo "üßπ Cleaning up test environment..."
        docker compose -f docker-compose.test.yml down -v --remove-orphans
        echo "‚úÖ Cleanup completed"

  # Additional job to test the PowerShell runner script
  test-runner-script:
    name: Test Runner Script Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Install PowerShell
      run: |
        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https software-properties-common
        wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
        sudo dpkg --force-confdef --force-confold -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell
        
    - name: Validate Test Runner Script
      shell: pwsh
      run: |
        # Check if the script exists and is valid PowerShell
        if (-not (Test-Path "./Test-Integration.ps1")) {
            Write-Host "‚ùå Test-Integration.ps1 not found" -ForegroundColor Red
            exit 1
        }
        
        # Basic syntax validation
        try {
            $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content "./Test-Integration.ps1" -Raw), [ref]$null)
            Write-Host "‚úÖ Test-Integration.ps1 syntax is valid" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Test-Integration.ps1 has syntax errors: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
        }
        
        # Check for required test files
        $requiredFiles = @(
            "./docker-compose.test.yml",
            "./scripts/integration-tests.Tests.ps1"
        )
        
        foreach ($file in $requiredFiles) {
            if (Test-Path $file) {
                Write-Host "‚úÖ Found: $file" -ForegroundColor Green
            } else {
                Write-Host "‚ùå Missing: $file" -ForegroundColor Red
                exit 1
            }
        }
        
        Write-Host "‚úÖ All required files are present" -ForegroundColor Green
